{"ast":null,"code":"import { START_LOADING, END_LOADING, FETCH_ALL, FETCH_POST, FETCH_BY_SEARCH, CREATE, UPDATE, DELETE, LIKE, COMMENT, FETCH_BY_CREATOR } from '../constants/actionTypes';\nimport * as api from '../api/index.js';\nexport const getPost = id => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data\n    } = await api.fetchPost(id);\n    dispatch({\n      type: FETCH_POST,\n      payload: {\n        post: data\n      }\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getPosts = page => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data: {\n        data,\n        currentPage,\n        numberOfPages\n      }\n    } = await api.fetchPosts(page);\n    dispatch({\n      type: FETCH_ALL,\n      payload: {\n        data,\n        currentPage,\n        numberOfPages\n      }\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getPostsByCreator = name => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data: {\n        data\n      }\n    } = await api.fetchPostsByCreator(name);\n    dispatch({\n      type: FETCH_BY_CREATOR,\n      payload: {\n        data\n      }\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getPostsBySearch = searchQuery => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data: {\n        data\n      }\n    } = await api.fetchPostsBySearch(searchQuery);\n    dispatch({\n      type: FETCH_BY_SEARCH,\n      payload: {\n        data\n      }\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const createNewPost = (post, history) => async dispatch => {\n  console.log(\"Creating post with data:\", post); // Log the data being sent\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data\n    } = await api.createPost(post);\n    dispatch({\n      type: CREATE,\n      payload: data\n    });\n    history.push(`/posts/${data._id}`);\n  } catch (error) {\n    var _error$response;\n    console.log(\"Error when creating post:\", (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data); // Log detailed error response\n  }\n};\nexport const updatePost = (id, post) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.updatePost(id, post);\n    dispatch({\n      type: UPDATE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const likePost = id => async dispatch => {\n  const user = JSON.parse(localStorage.getItem('profile'));\n  try {\n    const {\n      data\n    } = await api.likePost(id, user === null || user === void 0 ? void 0 : user.token);\n    dispatch({\n      type: LIKE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nconst handleComment = async () => {\n  if (!comment.trim()) {\n    console.log('No comment provided');\n    return;\n  }\n  try {\n    var _user, _user$result, _commentsRef$current;\n    const newComments = await dispatch(commentPost(`${(_user = user) === null || _user === void 0 ? void 0 : (_user$result = _user.result) === null || _user$result === void 0 ? void 0 : _user$result.name}: ${comment}`, post._id));\n    setComment('');\n    setComments(newComments); // Ensure newComments is what you expect\n    (_commentsRef$current = commentsRef.current) === null || _commentsRef$current === void 0 ? void 0 : _commentsRef$current.scrollIntoView({\n      behavior: 'smooth'\n    });\n  } catch (error) {\n    console.error('Failed to post comment:', error);\n  }\n};\nexport const deletePost = id => async dispatch => {\n  try {\n    await api.deletePost(id);\n    dispatch({\n      type: DELETE,\n      payload: id\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["START_LOADING","END_LOADING","FETCH_ALL","FETCH_POST","FETCH_BY_SEARCH","CREATE","UPDATE","DELETE","LIKE","COMMENT","FETCH_BY_CREATOR","api","getPost","id","dispatch","type","data","fetchPost","payload","post","error","console","log","getPosts","page","currentPage","numberOfPages","fetchPosts","getPostsByCreator","name","fetchPostsByCreator","getPostsBySearch","searchQuery","fetchPostsBySearch","createNewPost","history","createPost","push","_id","_error$response","response","updatePost","likePost","user","JSON","parse","localStorage","getItem","token","handleComment","comment","trim","_user","_user$result","_commentsRef$current","newComments","commentPost","result","setComment","setComments","commentsRef","current","scrollIntoView","behavior","deletePost"],"sources":["/Users/akshitanand/Deal_Dazzle_/client/src/actions/posts.js"],"sourcesContent":["import { START_LOADING, END_LOADING, FETCH_ALL, FETCH_POST, FETCH_BY_SEARCH, CREATE, UPDATE, DELETE, LIKE, COMMENT, FETCH_BY_CREATOR } from '../constants/actionTypes';\nimport * as api from '../api/index.js';\n\nexport const getPost = (id) => async (dispatch) => {\n  try {\n    dispatch({ type: START_LOADING });\n\n    const { data } = await api.fetchPost(id);\n\n    dispatch({ type: FETCH_POST, payload: { post: data } });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getPosts = (page) => async (dispatch) => {\n  try {\n    dispatch({ type: START_LOADING });\n    const { data: { data, currentPage, numberOfPages } } = await api.fetchPosts(page);\n\n    dispatch({ type: FETCH_ALL, payload: { data, currentPage, numberOfPages } });\n    dispatch({ type: END_LOADING });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getPostsByCreator = (name) => async (dispatch) => {\n  try {\n    dispatch({ type: START_LOADING });\n    const { data: { data } } = await api.fetchPostsByCreator(name);\n\n    dispatch({ type: FETCH_BY_CREATOR, payload: { data } });\n    dispatch({ type: END_LOADING });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getPostsBySearch = (searchQuery) => async (dispatch) => {\n  try {\n    dispatch({ type: START_LOADING });\n    const { data: { data } } = await api.fetchPostsBySearch(searchQuery);\n\n    dispatch({ type: FETCH_BY_SEARCH, payload: { data } });\n    dispatch({ type: END_LOADING });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const createNewPost = (post, history) => async (dispatch) => {\n  console.log(\"Creating post with data:\", post);  // Log the data being sent\n  try {\n    dispatch({ type: START_LOADING });\n    const { data } = await api.createPost(post);\n    dispatch({ type: CREATE, payload: data });\n    history.push(`/posts/${data._id}`);\n  } catch (error) {\n    console.log(\"Error when creating post:\", error.response?.data);  // Log detailed error response\n  }\n};\n\n\nexport const updatePost = (id, post) => async (dispatch) => {\n  try {\n    const { data } = await api.updatePost(id, post);\n\n    dispatch({ type: UPDATE, payload: data });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const likePost = (id) => async (dispatch) => {\n  const user = JSON.parse(localStorage.getItem('profile'));\n\n  try {\n    const { data } = await api.likePost(id, user?.token);\n\n    dispatch({ type: LIKE, payload: data });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst handleComment = async () => {\n  if (!comment.trim()) {\n    console.log('No comment provided');\n    return;\n  }\n  try {\n    const newComments = await dispatch(commentPost(`${user?.result?.name}: ${comment}`, post._id));\n    setComment('');\n    setComments(newComments); // Ensure newComments is what you expect\n    commentsRef.current?.scrollIntoView({ behavior: 'smooth' });\n  } catch (error) {\n    console.error('Failed to post comment:', error);\n  }\n};\n\n\nexport const deletePost = (id) => async (dispatch) => {\n  try {\n    await api.deletePost(id);\n\n    dispatch({ type: DELETE, payload: id });\n  } catch (error) {\n    console.log(error);\n  }\n};\n"],"mappings":"AAAA,SAASA,aAAa,EAAEC,WAAW,EAAEC,SAAS,EAAEC,UAAU,EAAEC,eAAe,EAAEC,MAAM,EAAEC,MAAM,EAAEC,MAAM,EAAEC,IAAI,EAAEC,OAAO,EAAEC,gBAAgB,QAAQ,0BAA0B;AACtK,OAAO,KAAKC,GAAG,MAAM,iBAAiB;AAEtC,OAAO,MAAMC,OAAO,GAAIC,EAAE,IAAK,MAAOC,QAAQ,IAAK;EACjD,IAAI;IACFA,QAAQ,CAAC;MAAEC,IAAI,EAAEf;IAAc,CAAC,CAAC;IAEjC,MAAM;MAAEgB;IAAK,CAAC,GAAG,MAAML,GAAG,CAACM,SAAS,CAACJ,EAAE,CAAC;IAExCC,QAAQ,CAAC;MAAEC,IAAI,EAAEZ,UAAU;MAAEe,OAAO,EAAE;QAAEC,IAAI,EAAEH;MAAK;IAAE,CAAC,CAAC;EACzD,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACpB;AACF,CAAC;AAED,OAAO,MAAMG,QAAQ,GAAIC,IAAI,IAAK,MAAOV,QAAQ,IAAK;EACpD,IAAI;IACFA,QAAQ,CAAC;MAAEC,IAAI,EAAEf;IAAc,CAAC,CAAC;IACjC,MAAM;MAAEgB,IAAI,EAAE;QAAEA,IAAI;QAAES,WAAW;QAAEC;MAAc;IAAE,CAAC,GAAG,MAAMf,GAAG,CAACgB,UAAU,CAACH,IAAI,CAAC;IAEjFV,QAAQ,CAAC;MAAEC,IAAI,EAAEb,SAAS;MAAEgB,OAAO,EAAE;QAAEF,IAAI;QAAES,WAAW;QAAEC;MAAc;IAAE,CAAC,CAAC;IAC5EZ,QAAQ,CAAC;MAAEC,IAAI,EAAEd;IAAY,CAAC,CAAC;EACjC,CAAC,CAAC,OAAOmB,KAAK,EAAE;IACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACpB;AACF,CAAC;AAED,OAAO,MAAMQ,iBAAiB,GAAIC,IAAI,IAAK,MAAOf,QAAQ,IAAK;EAC7D,IAAI;IACFA,QAAQ,CAAC;MAAEC,IAAI,EAAEf;IAAc,CAAC,CAAC;IACjC,MAAM;MAAEgB,IAAI,EAAE;QAAEA;MAAK;IAAE,CAAC,GAAG,MAAML,GAAG,CAACmB,mBAAmB,CAACD,IAAI,CAAC;IAE9Df,QAAQ,CAAC;MAAEC,IAAI,EAAEL,gBAAgB;MAAEQ,OAAO,EAAE;QAAEF;MAAK;IAAE,CAAC,CAAC;IACvDF,QAAQ,CAAC;MAAEC,IAAI,EAAEd;IAAY,CAAC,CAAC;EACjC,CAAC,CAAC,OAAOmB,KAAK,EAAE;IACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACpB;AACF,CAAC;AAED,OAAO,MAAMW,gBAAgB,GAAIC,WAAW,IAAK,MAAOlB,QAAQ,IAAK;EACnE,IAAI;IACFA,QAAQ,CAAC;MAAEC,IAAI,EAAEf;IAAc,CAAC,CAAC;IACjC,MAAM;MAAEgB,IAAI,EAAE;QAAEA;MAAK;IAAE,CAAC,GAAG,MAAML,GAAG,CAACsB,kBAAkB,CAACD,WAAW,CAAC;IAEpElB,QAAQ,CAAC;MAAEC,IAAI,EAAEX,eAAe;MAAEc,OAAO,EAAE;QAAEF;MAAK;IAAE,CAAC,CAAC;IACtDF,QAAQ,CAAC;MAAEC,IAAI,EAAEd;IAAY,CAAC,CAAC;EACjC,CAAC,CAAC,OAAOmB,KAAK,EAAE;IACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACpB;AACF,CAAC;AAED,OAAO,MAAMc,aAAa,GAAGA,CAACf,IAAI,EAAEgB,OAAO,KAAK,MAAOrB,QAAQ,IAAK;EAClEO,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEH,IAAI,CAAC,CAAC,CAAE;EAChD,IAAI;IACFL,QAAQ,CAAC;MAAEC,IAAI,EAAEf;IAAc,CAAC,CAAC;IACjC,MAAM;MAAEgB;IAAK,CAAC,GAAG,MAAML,GAAG,CAACyB,UAAU,CAACjB,IAAI,CAAC;IAC3CL,QAAQ,CAAC;MAAEC,IAAI,EAAEV,MAAM;MAAEa,OAAO,EAAEF;IAAK,CAAC,CAAC;IACzCmB,OAAO,CAACE,IAAI,CAAE,UAASrB,IAAI,CAACsB,GAAI,EAAC,CAAC;EACpC,CAAC,CAAC,OAAOlB,KAAK,EAAE;IAAA,IAAAmB,eAAA;IACdlB,OAAO,CAACC,GAAG,CAAC,2BAA2B,GAAAiB,eAAA,GAAEnB,KAAK,CAACoB,QAAQ,cAAAD,eAAA,uBAAdA,eAAA,CAAgBvB,IAAI,CAAC,CAAC,CAAE;EACnE;AACF,CAAC;AAGD,OAAO,MAAMyB,UAAU,GAAGA,CAAC5B,EAAE,EAAEM,IAAI,KAAK,MAAOL,QAAQ,IAAK;EAC1D,IAAI;IACF,MAAM;MAAEE;IAAK,CAAC,GAAG,MAAML,GAAG,CAAC8B,UAAU,CAAC5B,EAAE,EAAEM,IAAI,CAAC;IAE/CL,QAAQ,CAAC;MAAEC,IAAI,EAAET,MAAM;MAAEY,OAAO,EAAEF;IAAK,CAAC,CAAC;EAC3C,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACpB;AACF,CAAC;AAED,OAAO,MAAMsB,QAAQ,GAAI7B,EAAE,IAAK,MAAOC,QAAQ,IAAK;EAClD,MAAM6B,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC,CAAC;EAExD,IAAI;IACF,MAAM;MAAE/B;IAAK,CAAC,GAAG,MAAML,GAAG,CAAC+B,QAAQ,CAAC7B,EAAE,EAAE8B,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEK,KAAK,CAAC;IAEpDlC,QAAQ,CAAC;MAAEC,IAAI,EAAEP,IAAI;MAAEU,OAAO,EAAEF;IAAK,CAAC,CAAC;EACzC,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACpB;AACF,CAAC;AAED,MAAM6B,aAAa,GAAG,MAAAA,CAAA,KAAY;EAChC,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,CAAC,EAAE;IACnB9B,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;IAClC;EACF;EACA,IAAI;IAAA,IAAA8B,KAAA,EAAAC,YAAA,EAAAC,oBAAA;IACF,MAAMC,WAAW,GAAG,MAAMzC,QAAQ,CAAC0C,WAAW,CAAE,IAAAJ,KAAA,GAAET,IAAI,cAAAS,KAAA,wBAAAC,YAAA,GAAJD,KAAA,CAAMK,MAAM,cAAAJ,YAAA,uBAAZA,YAAA,CAAcxB,IAAK,KAAIqB,OAAQ,EAAC,EAAE/B,IAAI,CAACmB,GAAG,CAAC,CAAC;IAC9FoB,UAAU,CAAC,EAAE,CAAC;IACdC,WAAW,CAACJ,WAAW,CAAC,CAAC,CAAC;IAC1B,CAAAD,oBAAA,GAAAM,WAAW,CAACC,OAAO,cAAAP,oBAAA,uBAAnBA,oBAAA,CAAqBQ,cAAc,CAAC;MAAEC,QAAQ,EAAE;IAAS,CAAC,CAAC;EAC7D,CAAC,CAAC,OAAO3C,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;EACjD;AACF,CAAC;AAGD,OAAO,MAAM4C,UAAU,GAAInD,EAAE,IAAK,MAAOC,QAAQ,IAAK;EACpD,IAAI;IACF,MAAMH,GAAG,CAACqD,UAAU,CAACnD,EAAE,CAAC;IAExBC,QAAQ,CAAC;MAAEC,IAAI,EAAER,MAAM;MAAEW,OAAO,EAAEL;IAAG,CAAC,CAAC;EACzC,CAAC,CAAC,OAAOO,KAAK,EAAE;IACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACpB;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}