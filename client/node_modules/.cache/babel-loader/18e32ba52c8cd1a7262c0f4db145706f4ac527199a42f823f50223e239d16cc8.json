{"ast":null,"code":"var _jsxFileName = \"/Users/akshitanand/Deal_Dazzle_/client/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotificationContext = /*#__PURE__*/createContext();\nexport const useNotifications = () => {\n  _s();\n  const context = useContext(NotificationContext);\n  if (!context) {\n    throw new Error('useNotifications must be used within a NotificationProvider');\n  }\n  return context;\n};\n_s(useNotifications, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const NotificationProvider = ({\n  children\n}) => {\n  _s2();\n  const [notifications, setNotifications] = useState([]);\n  const [timeouts, setTimeouts] = useState([]);\n  const addNotification = notification => {\n    const id = new Date().getTime(); // Simple unique ID for each notification\n    setNotifications(prevNotifications => [...prevNotifications, {\n      id,\n      text: notification\n    }]);\n    const timeout = setTimeout(() => {\n      clearNotification(id);\n    }, 5000);\n    setTimeouts(prev => [...prev, timeout]);\n  };\n  const clearNotification = id => {\n    setNotifications(prevNotifications => prevNotifications.filter(n => n.id !== id));\n  };\n  const clearNotifications = () => {\n    notifications.forEach(n => clearTimeout(timeouts.find(t => t === n.id)));\n    setNotifications([]);\n  };\n\n  // Cleanup timeouts on unmount\n  useEffect(() => {\n    return () => {\n      timeouts.forEach(clearTimeout);\n    };\n  }, [timeouts]);\n  return /*#__PURE__*/_jsxDEV(NotificationContext.Provider, {\n    value: {\n      notifications,\n      addNotification,\n      clearNotifications\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s2(NotificationProvider, \"cYqtsHklgQmh6x3E7tp7v636S6g=\");\n_c = NotificationProvider;\nvar _c;\n$RefreshReg$(_c, \"NotificationProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","NotificationContext","useNotifications","_s","context","Error","NotificationProvider","children","_s2","notifications","setNotifications","timeouts","setTimeouts","addNotification","notification","id","Date","getTime","prevNotifications","text","timeout","setTimeout","clearNotification","prev","filter","n","clearNotifications","forEach","clearTimeout","find","t","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/akshitanand/Deal_Dazzle_/client/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst NotificationContext = createContext();\n\nexport const useNotifications = () => {\n  const context = useContext(NotificationContext);\n  if (!context) {\n    throw new Error('useNotifications must be used within a NotificationProvider');\n  }\n  return context;\n};\n\nexport const NotificationProvider = ({ children }) => {\n  const [notifications, setNotifications] = useState([]);\n  const [timeouts, setTimeouts] = useState([]);\n\n  const addNotification = (notification) => {\n    const id = new Date().getTime(); // Simple unique ID for each notification\n    setNotifications(prevNotifications => [...prevNotifications, { id, text: notification }]);\n    const timeout = setTimeout(() => {\n      clearNotification(id);\n    }, 5000);\n    setTimeouts(prev => [...prev, timeout]);\n  };\n\n  const clearNotification = (id) => {\n    setNotifications(prevNotifications => prevNotifications.filter(n => n.id !== id));\n  };\n\n  const clearNotifications = () => {\n    notifications.forEach(n => clearTimeout(timeouts.find(t => t === n.id)));\n    setNotifications([]);\n  };\n\n  // Cleanup timeouts on unmount\n  useEffect(() => {\n    return () => {\n      timeouts.forEach(clearTimeout);\n    };\n  }, [timeouts]);\n\n  return (\n    <NotificationContext.Provider value={{ notifications, addNotification, clearNotifications }}>\n      {children}\n    </NotificationContext.Provider>\n  );\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,mBAAmB,gBAAGN,aAAa,CAAC,CAAC;AAE3C,OAAO,MAAMO,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpC,MAAMC,OAAO,GAAGR,UAAU,CAACK,mBAAmB,CAAC;EAC/C,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,6DAA6D,CAAC;EAChF;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,gBAAgB;AAQ7B,OAAO,MAAMI,oBAAoB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EACpD,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACc,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMgB,eAAe,GAAIC,YAAY,IAAK;IACxC,MAAMC,EAAE,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC,CAAC;IACjCP,gBAAgB,CAACQ,iBAAiB,IAAI,CAAC,GAAGA,iBAAiB,EAAE;MAAEH,EAAE;MAAEI,IAAI,EAAEL;IAAa,CAAC,CAAC,CAAC;IACzF,MAAMM,OAAO,GAAGC,UAAU,CAAC,MAAM;MAC/BC,iBAAiB,CAACP,EAAE,CAAC;IACvB,CAAC,EAAE,IAAI,CAAC;IACRH,WAAW,CAACW,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEH,OAAO,CAAC,CAAC;EACzC,CAAC;EAED,MAAME,iBAAiB,GAAIP,EAAE,IAAK;IAChCL,gBAAgB,CAACQ,iBAAiB,IAAIA,iBAAiB,CAACM,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACV,EAAE,KAAKA,EAAE,CAAC,CAAC;EACnF,CAAC;EAED,MAAMW,kBAAkB,GAAGA,CAAA,KAAM;IAC/BjB,aAAa,CAACkB,OAAO,CAACF,CAAC,IAAIG,YAAY,CAACjB,QAAQ,CAACkB,IAAI,CAACC,CAAC,IAAIA,CAAC,KAAKL,CAAC,CAACV,EAAE,CAAC,CAAC,CAAC;IACxEL,gBAAgB,CAAC,EAAE,CAAC;EACtB,CAAC;;EAED;EACAZ,SAAS,CAAC,MAAM;IACd,OAAO,MAAM;MACXa,QAAQ,CAACgB,OAAO,CAACC,YAAY,CAAC;IAChC,CAAC;EACH,CAAC,EAAE,CAACjB,QAAQ,CAAC,CAAC;EAEd,oBACEX,OAAA,CAACC,mBAAmB,CAAC8B,QAAQ;IAACC,KAAK,EAAE;MAAEvB,aAAa;MAAEI,eAAe;MAAEa;IAAmB,CAAE;IAAAnB,QAAA,EACzFA;EAAQ;IAAA0B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACmB,CAAC;AAEnC,CAAC;AAAC5B,GAAA,CAlCWF,oBAAoB;AAAA+B,EAAA,GAApB/B,oBAAoB;AAAA,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}