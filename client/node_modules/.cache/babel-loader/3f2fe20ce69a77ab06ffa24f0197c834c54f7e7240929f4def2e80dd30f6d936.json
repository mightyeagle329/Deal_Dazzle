{"ast":null,"code":"import { START_LOADING, END_LOADING, FETCH_ALL, FETCH_POST, FETCH_BY_SEARCH, CREATE, UPDATE, DELETE, LIKE, COMMENT, FETCH_BY_CREATOR } from \"../constants/actionTypes\";\nimport * as api from \"../api/index.js\";\nexport const getPost = id => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data\n    } = await api.fetchPost(id);\n\n    // Check if the data includes the creator object\n    if (data.creator) {\n      // Extract the name from the creator object\n      const creatorName = data.creator.name || \"Unknown\";\n      // Merge the post data with the creator name\n      const postDataWithCreatorName = {\n        ...data,\n        creatorName\n      };\n      // Dispatch the action with the modified payload\n      dispatch({\n        type: FETCH_POST,\n        payload: {\n          post: postDataWithCreatorName\n        }\n      });\n    } else {\n      dispatch({\n        type: FETCH_POST,\n        payload: {\n          post: data\n        }\n      });\n    }\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getPosts = page => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data: {\n        data,\n        currentPage,\n        numberOfPages\n      }\n    } = await api.fetchPosts(page);\n    dispatch({\n      type: FETCH_ALL,\n      payload: {\n        data,\n        currentPage,\n        numberOfPages\n      }\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getPostsByCreator = name => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data: {\n        data\n      }\n    } = await api.fetchPostsByCreator(name);\n    dispatch({\n      type: FETCH_BY_CREATOR,\n      payload: {\n        data\n      }\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getPostsBySearch = searchQuery => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data: {\n        data\n      }\n    } = await api.fetchPostsBySearch(searchQuery);\n    dispatch({\n      type: FETCH_BY_SEARCH,\n      payload: {\n        data\n      }\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const createPost = (post, history) => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data\n    } = await api.createPost(post);\n    dispatch({\n      type: CREATE,\n      payload: data\n    });\n    history.push(`/posts/${data._id}`);\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const updatePost = (id, post) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.updatePost(id, post);\n    dispatch({\n      type: UPDATE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const likePost = id => async dispatch => {\n  const user = JSON.parse(localStorage.getItem(\"profile\"));\n  try {\n    const {\n      data\n    } = await api.likePost(id, user === null || user === void 0 ? void 0 : user.token);\n    dispatch({\n      type: LIKE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const commentPost = (value, id) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.comment(value, id);\n    dispatch({\n      type: COMMENT,\n      payload: data\n    });\n    return data.comments;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const deletePost = id => async dispatch => {\n  try {\n    await await api.deletePost(id);\n    dispatch({\n      type: DELETE,\n      payload: id\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["START_LOADING","END_LOADING","FETCH_ALL","FETCH_POST","FETCH_BY_SEARCH","CREATE","UPDATE","DELETE","LIKE","COMMENT","FETCH_BY_CREATOR","api","getPost","id","dispatch","type","data","fetchPost","creator","creatorName","name","postDataWithCreatorName","payload","post","error","console","log","getPosts","page","currentPage","numberOfPages","fetchPosts","getPostsByCreator","fetchPostsByCreator","getPostsBySearch","searchQuery","fetchPostsBySearch","createPost","history","push","_id","updatePost","likePost","user","JSON","parse","localStorage","getItem","token","commentPost","value","comment","comments","deletePost"],"sources":["/Users/akshitanand/Deal_Dazzle_/client/src/actions/posts.js"],"sourcesContent":["import {\n  START_LOADING,\n  END_LOADING,\n  FETCH_ALL,\n  FETCH_POST,\n  FETCH_BY_SEARCH,\n  CREATE,\n  UPDATE,\n  DELETE,\n  LIKE,\n  COMMENT,\n  FETCH_BY_CREATOR,\n} from \"../constants/actionTypes\";\nimport * as api from \"../api/index.js\";\n\nexport const getPost = (id) => async (dispatch) => {\n  try {\n    dispatch({ type: START_LOADING });\n\n    const { data } = await api.fetchPost(id);\n\n    // Check if the data includes the creator object\n    if (data.creator) {\n      // Extract the name from the creator object\n      const creatorName = data.creator.name || \"Unknown\";\n      // Merge the post data with the creator name\n      const postDataWithCreatorName = { ...data, creatorName };\n      // Dispatch the action with the modified payload\n      dispatch({ type: FETCH_POST, payload: { post: postDataWithCreatorName } });\n    } else {\n      dispatch({ type: FETCH_POST, payload: { post: data } });\n    }\n\n    dispatch({ type: END_LOADING });\n\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getPosts = (page) => async (dispatch) => {\n  try {\n    dispatch({ type: START_LOADING });\n    const {\n      data: { data, currentPage, numberOfPages },\n    } = await api.fetchPosts(page);\n\n    dispatch({\n      type: FETCH_ALL,\n      payload: { data, currentPage, numberOfPages },\n    });\n    dispatch({ type: END_LOADING });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getPostsByCreator = (name) => async (dispatch) => {\n  try {\n    dispatch({ type: START_LOADING });\n    const {\n      data: { data },\n    } = await api.fetchPostsByCreator(name);\n\n    dispatch({ type: FETCH_BY_CREATOR, payload: { data } });\n    dispatch({ type: END_LOADING });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getPostsBySearch = (searchQuery) => async (dispatch) => {\n  try {\n    dispatch({ type: START_LOADING });\n    const {\n      data: { data },\n    } = await api.fetchPostsBySearch(searchQuery);\n\n    dispatch({ type: FETCH_BY_SEARCH, payload: { data } });\n    dispatch({ type: END_LOADING });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const createPost = (post, history) => async (dispatch) => {\n  try {\n    dispatch({ type: START_LOADING });\n    const { data } = await api.createPost(post);\n\n    dispatch({ type: CREATE, payload: data });\n\n    history.push(`/posts/${data._id}`);\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const updatePost = (id, post) => async (dispatch) => {\n  try {\n    const { data } = await api.updatePost(id, post);\n\n    dispatch({ type: UPDATE, payload: data });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const likePost = (id) => async (dispatch) => {\n  const user = JSON.parse(localStorage.getItem(\"profile\"));\n\n  try {\n    const { data } = await api.likePost(id, user?.token);\n\n    dispatch({ type: LIKE, payload: data });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const commentPost = (value, id) => async (dispatch) => {\n  try {\n    const { data } = await api.comment(value, id);\n\n    dispatch({ type: COMMENT, payload: data });\n\n    return data.comments;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const deletePost = (id) => async (dispatch) => {\n  try {\n    await await api.deletePost(id);\n\n    dispatch({ type: DELETE, payload: id });\n  } catch (error) {\n    console.log(error);\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}